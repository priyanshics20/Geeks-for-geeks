//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;
import java.lang.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0) {
            int n = Integer.parseInt(in.readLine());
            
            Solution ob = new Solution();
            ArrayList<ArrayList<Integer>> ans = ob.nQueen(n);
            if(ans.size() == 0)
                System.out.println("-1");
            else {
                for(int i = 0;i < ans.size();i++){
                    System.out.print("[");
                    for(int j = 0;j < ans.get(i).size();j++)
                        System.out.print(ans.get(i).get(j) + " ");
                    System.out.print("] ");
                }
                System.out.println();
            }
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class ListComparator<T extends Comparable<T>> implements Comparator<List<T>> {
  @Override
  public int compare(List<T> o1, List<T> o2) {
    for (int i = 0; i < Math.min(o1.size(), o2.size()); i++) {
      int c = o1.get(i).compareTo(o2.get(i));
      if (c != 0) {
        return c;
      }
    }
    return Integer.compare(o1.size(), o2.size());
  }
}

class Solution{
    
    public static boolean isSafe(int row, int col, char[][]board){
        
        //horizontal check
        for(int j=0;j<board.length;j++){
            if(board[row][j]=='Q')
                return false;
        }
        //vertical check
        for(int i=0;i<board.length;i++){
            if(board[i][col]=='Q')
                return false;
        }
        //upper left
        for(int r=row, c=col;c>=0 && r>=0;c--,r--){
            if(board[r][c]=='Q')
                return false;
        }
        //upper right
        for(int r=row, c=col; r>=0 && c<board.length;r--,c++){
            if(board[r][c]=='Q')
                return false;
        }
        //lower left
        for(int r=row, c=col;c>=0 && r<board.length;r++,c--){
            if(board[r][c]=='Q')
                return false;
        }
        //lower right
        for(int r=row,c=col; c<board.length && r<board.length;r++,c++){
            if(board[r][c]=='Q')
                return false;
        }
        return true;
    }
    
    public static void saveBoard(char[][]board, ArrayList<ArrayList<Integer>> allBoards){
        ArrayList<Integer> newBoard = new ArrayList<>();
        for(int i=0;i<board.length;i++){
            int value = 0;
            for(int j=0;j<board[0].length;j++){
                if(board[i][j]=='Q'){
                    value = j+1;
                }
            }
            newBoard.add(value);
        }
        allBoards.add(newBoard);
    }
    
    public static void helper(char[][]board, ArrayList<ArrayList<Integer>> allBoards, int col){
        
        if(col==board.length){
            saveBoard(board,allBoards);
            return;
        }
        
        for(int row=0;row<board.length;row++){
            if(isSafe(row,col,board)){
                board[row][col]='Q';
                helper(board,allBoards,col+1);
                board[row][col]='.';
            }
        }
    }
    
    static ArrayList<ArrayList<Integer>> nQueen(int n) {
        // code here
        ArrayList<ArrayList<Integer>> allBoards = new ArrayList<>();
        char board[][] = new char[n][n];
        helper(board, allBoards,0);
        Collections.sort(allBoards,new ListComparator<>());
        return allBoards;
    }
}
